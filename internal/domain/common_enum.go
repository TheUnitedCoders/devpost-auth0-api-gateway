// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package domain

import (
	"errors"
	"fmt"
)

const (
	// HTTPMethodUnspecified is a HTTPMethod of type Unspecified.
	HTTPMethodUnspecified HTTPMethod = iota
	// HTTPMethodGet is a HTTPMethod of type Get.
	HTTPMethodGet
	// HTTPMethodPut is a HTTPMethod of type Put.
	HTTPMethodPut
	// HTTPMethodPost is a HTTPMethod of type Post.
	HTTPMethodPost
	// HTTPMethodDelete is a HTTPMethod of type Delete.
	HTTPMethodDelete
	// HTTPMethodPatch is a HTTPMethod of type Patch.
	HTTPMethodPatch
)

var ErrInvalidHTTPMethod = errors.New("not a valid HTTPMethod")

const _HTTPMethodName = "unspecifiedgetputpostdeletepatch"

var _HTTPMethodMap = map[HTTPMethod]string{
	HTTPMethodUnspecified: _HTTPMethodName[0:11],
	HTTPMethodGet:         _HTTPMethodName[11:14],
	HTTPMethodPut:         _HTTPMethodName[14:17],
	HTTPMethodPost:        _HTTPMethodName[17:21],
	HTTPMethodDelete:      _HTTPMethodName[21:27],
	HTTPMethodPatch:       _HTTPMethodName[27:32],
}

// String implements the Stringer interface.
func (x HTTPMethod) String() string {
	if str, ok := _HTTPMethodMap[x]; ok {
		return str
	}
	return fmt.Sprintf("HTTPMethod(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x HTTPMethod) IsValid() bool {
	_, ok := _HTTPMethodMap[x]
	return ok
}

var _HTTPMethodValue = map[string]HTTPMethod{
	_HTTPMethodName[0:11]:  HTTPMethodUnspecified,
	_HTTPMethodName[11:14]: HTTPMethodGet,
	_HTTPMethodName[14:17]: HTTPMethodPut,
	_HTTPMethodName[17:21]: HTTPMethodPost,
	_HTTPMethodName[21:27]: HTTPMethodDelete,
	_HTTPMethodName[27:32]: HTTPMethodPatch,
}

// ParseHTTPMethod attempts to convert a string to a HTTPMethod.
func ParseHTTPMethod(name string) (HTTPMethod, error) {
	if x, ok := _HTTPMethodValue[name]; ok {
		return x, nil
	}
	return HTTPMethod(0), fmt.Errorf("%s is %w", name, ErrInvalidHTTPMethod)
}
