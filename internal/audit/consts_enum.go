// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package audit

import (
	"errors"
	"fmt"
)

const (
	// ResultUnspecified is a Result of type Unspecified.
	ResultUnspecified Result = iota
	// ResultOk is a Result of type Ok.
	ResultOk
	// ResultError is a Result of type Error.
	ResultError
)

var ErrInvalidResult = errors.New("not a valid Result")

const _ResultName = "unspecifiedokerror"

var _ResultMap = map[Result]string{
	ResultUnspecified: _ResultName[0:11],
	ResultOk:          _ResultName[11:13],
	ResultError:       _ResultName[13:18],
}

// String implements the Stringer interface.
func (x Result) String() string {
	if str, ok := _ResultMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Result(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Result) IsValid() bool {
	_, ok := _ResultMap[x]
	return ok
}

var _ResultValue = map[string]Result{
	_ResultName[0:11]:  ResultUnspecified,
	_ResultName[11:13]: ResultOk,
	_ResultName[13:18]: ResultError,
}

// ParseResult attempts to convert a string to a Result.
func ParseResult(name string) (Result, error) {
	if x, ok := _ResultValue[name]; ok {
		return x, nil
	}
	return Result(0), fmt.Errorf("%s is %w", name, ErrInvalidResult)
}
